'================================================================================
' Outlook予定取得マクロ (Version 1.2 - 転記機能追加)
' 修正内容:
' ・シート保護のパスワード処理を改善 (v1.1)
' ・「データ取得」シートのC4セルの値を「データ登録」シートのD4セルに転記する機能を追加 (v1.2)
'================================================================================
Sub GetOutlookSchedule()
    '============================================================
    ' ■ 1. 初期設定と定数宣言
    '============================================================
    ' --- ユーザー設定項目 (環境に合わせて変更してください) ---
    Const TARGET_SHEET_NAME As String = "データ取得"      ' マクロを実行するシート名
    Const DATE_INPUT_CELL As String = "C3"          ' 日付が入力されているセル番地
    Const OUTPUT_HEADER_ROW As Long = 7             ' 出力先のヘッダー行番号
    Const OUTPUT_START_COLUMN As String = "C"       ' 出力先の開始列

    ' --- 追加機能に関する設定項目 ---
    Const DEST_SHEET_NAME As String = "データ登録"      ' 転記先のシート名
    Const SOURCE_CELL As String = "C4"              ' 転記元のセル番地 (データ取得シート)
    Const DEST_CELL As String = "D4"                ' 転記先のセル番地 (データ登録シート)

    ' --- 変数宣言 ---
    ' Excel関連オブジェクト
    Dim ws As Worksheet
    Dim wsDest As Worksheet         ' 転記先シート用
    Dim wasProtected As Boolean     ' 元々保護されていたかどうかを記録

    ' Outlook関連オブジェクト
    Dim olApp As Object             ' Outlook.Application
    Dim olNs As Object              ' Outlook.Namespace
    Dim olFolder As Object          ' Outlook.MAPIFolder (予定表フォルダ)
    Dim olItems As Object           ' Outlook.Items (予定コレクション)
    Dim olRestrictedItems As Object ' フィルタリング後の予定コレクション
    Dim olApt As Object             ' Outlook.AppointmentItem (個々の予定)
    
    ' 処理制御用変数
    Dim targetDate As Date          ' 取得対象の日付
    Dim outputRow As Long           ' Excelへの書き込み開始行
    Dim lastOutputRow As Long       ' 書き込み範囲の最終行
    Dim actualCount As Long         ' 取得した予定の件数
    Dim cellValue As Variant        ' 日付セルから読み取った値

    ' ■ エラー発生時はErrorHandlerセクションへジャンプ
    On Error GoTo ErrorHandler

    ' ■ 処理中の画面描画を停止してちらつき防止と高速化
    Application.ScreenUpdating = False

    '============================================================
    ' ■ 2. 実行前チェックと準備
    '============================================================
    ' --- 対象シートの存在確認と取得 ---
    Set ws = ThisWorkbook.Sheets(TARGET_SHEET_NAME)

    ' --- シート保護状態を記録し、必要に応じて解除 ---
    wasProtected = ws.ProtectContents
    If wasProtected Then
        ' パスワードなしで保護されている場合の解除を試行
        On Error Resume Next
        ws.Unprotect
        If Err.Number <> 0 Then
            ' パスワード付きの場合はユーザーに入力を求める
            On Error GoTo ErrorHandler
            Dim userPassword As String
            userPassword = InputBox("シートがパスワードで保護されています。パスワードを入力してください:", "パスワード入力")
            If userPassword = "" Then
                MsgBox "パスワードが入力されませんでした。処理を中止します。", vbExclamation
                GoTo CleanUp
            End If
            ws.Unprotect Password:=userPassword
        End If
        On Error GoTo ErrorHandler
    End If

    ' --- 日付入力セルのチェック ---
    cellValue = ws.Range(DATE_INPUT_CELL).Value
    If IsEmpty(cellValue) Or cellValue = "" Then
        MsgBox "セル " & DATE_INPUT_CELL & " が空欄です。日付を入力してください。", vbExclamation, "入力エラー"
        GoTo CleanUp
    End If
    
    targetDate = CDate(cellValue)

    '============================================================
    ' ■ 3. Excelシートの出力範囲をクリア
    '============================================================
    outputRow = OUTPUT_HEADER_ROW + 1
    lastOutputRow = ws.Cells(ws.Rows.Count, OUTPUT_START_COLUMN).End(xlUp).Row

    If lastOutputRow >= outputRow Then
        Dim startColNum As Long
        startColNum = ws.Range(OUTPUT_START_COLUMN & "1").Column
        ws.Range(ws.Cells(outputRow, startColNum), ws.Cells(lastOutputRow, startColNum + 2)).ClearContents
    End If
    
    With ws.Cells(OUTPUT_HEADER_ROW, OUTPUT_START_COLUMN).Resize(1, 3)
        .Value = Array("時間", "件名", "会議時間")
        .Font.Bold = True
    End With

    '============================================================
    ' ■ 4. Outlookアプリケーションへの接続
    '============================================================
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then
        Set olApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo ErrorHandler
    If olApp Is Nothing Then Err.Raise vbObjectError, , "Outlookに接続できません"

    '============================================================
    ' ■ 5. 指定日の予定をOutlookから取得
    '============================================================
    Set olNs = olApp.GetNamespace("MAPI")
    Set olFolder = olNs.GetDefaultFolder(9) ' 9はolFolderCalendar
    Set olItems = olFolder.items

    olItems.Sort "[Start]"
    olItems.IncludeRecurrences = True

    Dim filterString As String
    filterString = "[Start] <= '" & Format(targetDate, "yyyy/MM/dd 23:59") & "' AND [End] >= '" & Format(targetDate, "yyyy/MM/dd 00:00") & "'"
    Set olRestrictedItems = olItems.Restrict(filterString)

    '============================================================
    ' ■ 6. 取得した予定をExcelシートへ出力
    '============================================================
    If olRestrictedItems.Count = 0 Then
        ws.Cells(outputRow, OUTPUT_START_COLUMN).Value = "予定はありません"
        MsgBox Format(targetDate, "yyyy年mm月dd日") & " の予定はありませんでした。", vbInformation, "処理完了"
    Else
        actualCount = 0
        For Each olApt In olRestrictedItems
            actualCount = actualCount + 1
            ws.Cells(outputRow, OUTPUT_START_COLUMN).Value = Format(olApt.Start, "hhmm") & "-" & Format(olApt.End, "hhmm")
            ws.Cells(outputRow, OUTPUT_START_COLUMN).Offset(0, 1).Value = olApt.Subject
            
            Dim totalMinutes As Long, hours As Long, minutes As Long
            totalMinutes = DateDiff("n", olApt.Start, olApt.End)
            hours = totalMinutes \ 60
            minutes = totalMinutes Mod 60
            
            With ws.Cells(outputRow, OUTPUT_START_COLUMN).Offset(0, 2)
                .NumberFormat = "@"
                .Value = Format(hours, "00") & Format(minutes, "00")
            End With
            
            outputRow = outputRow + 1
        Next olApt
        MsgBox Format(targetDate, "yyyy年mm月dd日") & " の予定を " & actualCount & " 件取得しました。", vbInformation, "処理完了"
    End If

    '============================================================
    ' ■ 7. データ転記処理 (追加機能)
    '============================================================
    On Error Resume Next ' 転記先シートが存在しない場合のエラーをスキップ
    Set wsDest = ThisWorkbook.Sheets(DEST_SHEET_NAME)
    On Error GoTo ErrorHandler ' エラーハンドリングを通常に戻す

    If Not wsDest Is Nothing Then
        ' 「データ取得」シートのC4セルが空でなければ転記を実行
        If Not IsEmpty(ws.Range(SOURCE_CELL).Value) And ws.Range(SOURCE_CELL).Value <> "" Then
            ' 注意: 転記先シートが保護されている場合、このままではエラーになります。
            ' 必要に応じて、wsDestシートの保護解除・再保護の処理を追加してください。
            wsDest.Range(DEST_CELL).Value = ws.Range(SOURCE_CELL).Value
        End If
    End If
    
    GoTo CleanUp

ErrorHandler:
    Dim errorTitle As String, errorMsg As String
    errorTitle = "エラーが発生しました"
    Select Case Err.Number
        Case 9
            errorMsg = "シート「" & TARGET_SHEET_NAME & "」または「" & DEST_SHEET_NAME & "」が見つかりませんでした。"
        Case 13
            errorMsg = "セル「" & DATE_INPUT_CELL & "」の値を日付として認識できません。"
        Case 287, -2147467259, -2147221233
            errorMsg = "Outlookへのアクセスで問題が発生しました。"
        Case vbObjectError
            errorMsg = "Outlookアプリケーションの起動に失敗しました。"
        Case Else
            errorMsg = "予期しないエラーが発生しました。" & vbCrLf & _
                       "エラー番号: " & Err.Number & vbCrLf & _
                       "エラー内容: " & Err.Description
    End Select
    MsgBox errorMsg, vbCritical, errorTitle
    GoTo CleanUp

CleanUp:
    ' --- 元々保護されていた場合のみ、パスワードなしで再保護 ---
    If Not ws Is Nothing And wasProtected Then
        ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If

    ' --- オブジェクト変数の解放 ---
    On Error Resume Next
    Set olApt = Nothing
    Set olRestrictedItems = Nothing
    Set olItems = Nothing
    Set olFolder = Nothing
    Set olNs = Nothing
    Set olApp = Nothing
    Set ws = Nothing
    Set wsDest = Nothing

    Application.ScreenUpdating = True
End Sub

' 実行用のマクロ（ボタンなどに登録する場合）
Sub ExecuteOutlookSchedule()
    Call GetOutlookSchedule
End Sub
